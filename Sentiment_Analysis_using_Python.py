# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gB7G_4c_2iXCrCabybEqfjr2M-PRJQdC
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("sentimentdataset.csv")
df

df.shape

df.dtypes

df.nunique()

df["Sentiment"].unique()

df["Hashtags"].unique()

df.describe()

cols_to_drop = ['Unnamed: 0.1', 'Unnamed: 0','Year','Day','Month']
corr_matrix = df.drop(cols_to_drop, axis=1).corr()
sns.heatmap(corr_matrix,annot =True,cmap ="crest")

"""#**Extract insights from the most frequently used hashtags**"""

gk=  df['Hashtags'].str.split(expand=True).stack().reset_index(level=1, drop=True).reset_index(name='Hashtags')
gk

# Create a DataFrame with the provided hashtags



# Define a function to categorize hashtags
def categorize_hashtags(Hashtags):
    nature_keywords = ['#Serenity', '#SunsetViews', '#BreathtakingSunrise', '#NatureRetreat', '#NatureExploration', '#FloatingThroughLife', '#NatureWhispers', '#MoonlitPeace', '#MoonlitSerenade', '#OceanRetreat', '#StarryNight', '#Awe']
    morning_keywords = ['#Morning', '#Sunrise', '#SunriseOfPossibilities', '#BrighterTomorrows', '#SeedsOfOptimism', '#SailorOfDreams']
    fitness_keywords = ['#FitnessChallengeCompleted', '#ChallengeAccepted', '#Fun', '#NewBeginnings', '#FitnessGoals', '#ScalingPeaks', '#Fitness', '#Workout']
    travel_keywords = ['#Travel', '#Adventure', '#RoadTrip', '#ScenicTrails', '#BikeRide', '#TravelPlans', '#WeekendAdventure', '#AdventureTime', '#DriftingThroughLife']
    cooking_keywords = ['#Cooking', '#Food', '#Brunch', '#SpecialDinner', '#Dessert', '#CozyNight', '#MovieTime', '#HomeCooking']
    positive_vibes_keywords = ['#Gratitude', '#SmallJoys', '#Hope', '#PersonalDevelopment', '#SunriseOfPossibilities', '#BrighterTomorrows', '#SeedsOfOptimism', '#SailorOfDreams', '#PositiveVibes', '#CanvasOfDreams', '#Hopeful', '#GoldenGlow']
    entertainment_keywords = ['#MovieNight', '#MustWatch', '#Gaming', '#ConcertNight', '#Tournament', '#ComedyShow', '#StandUpComedy']
    politics_keywords = ['#Politics', '#Debate', '#Injustice', '#Angry']
    tech_keywords = ['#Tech', '#Innovation', '#AI', '#TechConference', '#VR', '#VirtualReality', '#VRMeetup']
    reflection_keywords = ['#Reflection', '#Future', '#BitterLesson', '#Growth']
    pets_keywords = ['#PetAdoption', '#FurryFriend', '#PetLove', '#PetAntics']
    career_keywords = ['#Career', '#Milestone', '#Accomplished', '#Success']
    friends_keywords = ['#Brunch', '#Friends', '#FamilyTime', '#Weekend', '#OldFriends', '#FriendshipReunion']
    personal_growth_keywords = ['#LanguageLearning', '#PersonalGrowth', '#Inspiration', '#Workshop', '#Mindfulness', '#Meditation', '#NewWeek']
    reading_keywords = ['#Reading', '#QuietTime', '#BookRelease', '#FavoriteAuthor', '#BookTime', '#JournalMoments']
    productivity_keywords = ['#Productivity', '#WorkFromHome']
    self_care_keywords = ['#MentalHealth', '#SelfCare', '#TranquilWaters']
    art_keywords = ['#Art', '#PaintingInProgress', '#GalleryExplore', '#ArtisticProject', '#ExtraordinaryPath']
    emotions_keywords = ['#Happiness', '#Joy', '#Love', '#Amusement', '#Enjoyment', '#Awe', '#Disappointed', '#Surprise', '#Acceptance', '#Adoration', '#Anticipation', '#Calmness', '#Confusion', '#Excitement', '#Kindness', '#Pride', '#Shame', '#Anger', '#Fear', '#Sadness', '#Disgust', '#Elation', '#Memories', '#Euphoria', '#Victory', '#Contentment', '#Nature', '#Meditation', '#Blessed', '#Optimism', '#Community', '#CharityEvent', '#FamilyTime', '#Excitement', '#NewProject', '#Milestone', '#History', '#OldFriends', '#LiveMusic', '#SundayMood', '#BookTime', '#Supportive', '#NewBeginnings', '#PersonalGrowth', '#HolidaySupport', '#CozyEvening', '#AdventureTime', '#Creativity', '#FitnessGoals', '#ArtAppreciation', '#PersonalAchievement', '#HiddenGem', '#BirthdaySurprise', '#HomeCooking', '#PeacefulMelody', '#CommunitySupport', '#BusinessVenture', '#Mentorship', '#CommunityKindness', '#LoveNote', '#TravelAdventure', '#ArtisticProject', '#HelpingOthers', '#HistoricalSite', '#FitnessMilestone', '#ProductLaunchSuccess', '#Love']
    volunteerism_keywords = ['#Admiration', '#Volunteers', '#CharityEvent', '#CommunityKindness', '#HelpingOthers']
    family_keywords = ['#Affection', '#FamilyLove', '#Tenderness', '#FamilyTime', '#Love']
    night_sky_keywords = ['#Awe', '#StarryNight', '#BreathtakingSunrise']
    project_keywords = ['#Disappointed', '#Project', '#Bitter', '#BadService', '#WeekendAdventure', '#NewProject', '#SurpriseParty', '#OldFriends', '#Gift']
    other_keywords = ['#Despair', '#Struggle', '#Grief', '#Loss', '#Loneliness', '#Isolation', '#Jealousy', '#Envy', '#Resentment', '#Bitterness', '#Frustration', '#Obstacles', '#Boredom', '#LackOfInterest', '#Anxiety', '#Worry', '#Intimidation', '#Fear', '#Helplessness', '#Overwhelmed']

    all_keywords = [nature_keywords, morning_keywords, fitness_keywords, travel_keywords, cooking_keywords,
                 positive_vibes_keywords, entertainment_keywords, politics_keywords, tech_keywords, reflection_keywords,
                 pets_keywords, career_keywords, friends_keywords, personal_growth_keywords, reading_keywords,
                 productivity_keywords, self_care_keywords, art_keywords, emotions_keywords, volunteerism_keywords,
                 family_keywords, night_sky_keywords, project_keywords, other_keywords]

    if any(keyword in Hashtags for keyword in nature_keywords):
        return 'Nature'
    elif any(keyword in Hashtags for keyword in morning_keywords):
        return 'Morning'
    elif any(keyword in Hashtags for keyword in fitness_keywords):
        return 'Fitness'
    elif any(keyword in Hashtags for keyword in travel_keywords):
        return 'Travel'
    elif any(keyword in Hashtags for keyword in cooking_keywords):
        return 'Cooking'
    elif any(keyword in Hashtags for keyword in positive_vibes_keywords):
        return 'PositiveVibes'
    elif any(keyword in Hashtags for keyword in entertainment_keywords):
        return 'Entertainment'
    elif any(keyword in Hashtags for keyword in politics_keywords):
        return 'Politics'
    elif any(keyword in Hashtags for keyword in tech_keywords):
        return 'Tech'
    elif any(keyword in Hashtags for keyword in reflection_keywords):
        return 'Reflection'
    elif any(keyword in Hashtags for keyword in pets_keywords):
        return 'Pets'
    elif any(keyword in Hashtags for keyword in career_keywords):
        return 'Career'
    elif any(keyword in Hashtags for keyword in friends_keywords):
        return 'Friends'
    elif any(keyword in Hashtags for keyword in personal_growth_keywords):
        return 'PersonalGrowth'
    elif any(keyword in Hashtags for keyword in reading_keywords):
        return 'Reading'
    elif any(keyword in Hashtags for keyword in productivity_keywords):
        return 'Productivity'
    elif any(keyword in Hashtags for keyword in self_care_keywords):
        return 'SelfCare'
    elif any(keyword in Hashtags for keyword in art_keywords):
        return 'Art'
    elif any(keyword in Hashtags for keyword in emotions_keywords):
        return 'Emotions'
    elif any(keyword in Hashtags for keyword in volunteerism_keywords):
        return 'Volunteerism'
    elif any(keyword in Hashtags for keyword in family_keywords):
        return 'Family'
    elif any(keyword in Hashtags for keyword in night_sky_keywords):
        return 'NightSky'
    elif any(keyword in Hashtags for keyword in project_keywords):
        return 'Project'
    elif any(keyword in Hashtags for keyword in other_keywords):
        return 'Other'

    return 'Other'




# Apply the categorization function to the 'gk' column and create a new 'category' column
df['category'] = df['Hashtags'].apply(categorize_hashtags)

# Display the resulting DataFrame
print(df[['Hashtags', 'category']])

sns.barplot(x=df['category'].unique(), y=df['category'].value_counts(), data=df)
plt.xticks(rotation=90)

"""#Analyze user engagement patterns across different platforms, countries, and time periods."""

# Assuming your DataFrame is named 'df'
# Replace 'df' with your actual DataFrame name

# Convert the 'Timestamp' column to datetime format
df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Extract relevant columns for analysis
engagement_data = df[['Timestamp', 'Platform', 'Country', 'Likes', 'Retweets']]

# Extract date-related information
engagement_data['Date'] = engagement_data['Timestamp'].dt.date
engagement_data['Hour'] = engagement_data['Timestamp'].dt.hour
engagement_data['DayOfWeek'] = engagement_data['Timestamp'].dt.day_name()

# Group by platform, country, and time period
platform_grouped = engagement_data.groupby('Platform').agg({
    'Likes': 'sum',
    'Retweets': 'sum'
})

## Extract year from Timestamp
engagement_data['Year'] = engagement_data['Timestamp'].dt.year

engagement_data['Country'] = engagement_data['Country'].str.strip().str.lower()

# Group by country, year, and sum the Likes and Retweets
country_yearly_total = engagement_data.groupby(['Country', 'Year']).agg({
    'Likes': 'sum',
    'Retweets': 'sum'
}).reset_index()

# Select the top 20 countries based on total engagement (Likes + Retweets)
top_countries = country_yearly_total.groupby('Country')['Likes'].sum().nlargest(15).index
top_countries_data = country_yearly_total[country_yearly_total['Country'].isin(top_countries)]

hourly_grouped = engagement_data.groupby('Hour').agg({
    'Likes': 'sum',
    'Retweets': 'sum'
})

day_of_week_grouped = engagement_data.groupby('DayOfWeek').agg({
    'Likes': 'sum',
    'Retweets': 'sum'
})

# Set seaborn style
sns.set(style="whitegrid")

# Visualization

# User engagement by platform
platform_grouped.plot(kind='bar', stacked=True, title='User Engagement by Platform')
plt.xlabel('Platform')
plt.ylabel('Engagement')
plt.show()

# User engagement by the top 20 countries and year
fig, ax = plt.subplots(figsize=(14, 6))

# Plot the clustered bar chart
sns.barplot(x='Country', y='Likes', hue='Year', data=top_countries_data, ci=None, ax=ax)

# Create a legend
ax.legend(loc='upper left', title='Year')

# Set titles and labels
ax.set_title('User Engagement by Top 20 Countries and Year')
ax.set_xlabel('Country')
ax.set_ylabel('Likes')

# Rotate x-axis labels for better readability
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

# Show the plot
plt.tight_layout()
plt.show()

# User engagement by hour of the day
hourly_grouped.plot(kind='line', title='User Engagement by Hour of the Day')
plt.xlabel('Hour of the Day')
plt.ylabel('Engagement')
plt.show()

# User engagement by day of the week
day_of_week_grouped.plot(kind='bar', stacked=True, title='User Engagement by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Engagement')
plt.show()

df['Sentiment'] = df['Sentiment'].str.strip()
def Test_sentiment(Sentiment) :
  if Sentiment in ['Happiness', 'Joy', 'Love', 'Amusement', 'Enjoyment', 'Admiration', 'Affection', 'Awe', 'Calmness', 'Kind',
             'Pride', 'Elation', 'Euphoria', 'Contentment', 'Serenity', 'Gratitude', 'Hope', 'Empowerment', 'Compassion',
             'Tenderness', 'Arousal', 'Enthusiasm', 'Fulfillment', 'Reverence', 'Determination', 'Zest', 'Hopeful', 'Proud',
             'Grateful', 'Empathetic', 'Compassionate', 'Playful', 'Free-spirited', 'Inspired', 'Confident', 'Thrill',
             'Overjoyed', 'Inspiration', 'Motivation', 'JoyfulReunion','Positive','Energy', 'Happy', 'Excitement', 'Success', 'Celebration', 'Accomplishment', 'Positivity', 'Enchantment', 'Connection', 'Amazement',
             'Satisfaction', 'Journey', 'Touched', 'Renewed Effort', 'Joy in Baking', 'InnerJourney', 'Freedom', 'Blessed', 'Friendship', 'Wonderment',
             'Adrenaline', 'Harmony', 'Culinary Adventure', 'Reflection', 'Ecstasy']:
    return 'Positive'
  elif Sentiment in ['Sad', 'Hate', 'Bad', 'Sadness', 'Disgust', 'Bitter', 'Confusion', 'Fear', 'Anxiety', 'Intimidation',
             'Helplessness', 'Regret', 'Despair', 'Grief', 'Loneliness', 'Jealousy', 'Resentment', 'Frustration',
             'Boredom', 'Dismissive', 'Bitterness', 'Yearning', 'Fearful', 'Apprehensive', 'Overwhelmed', 'Jealous',
             'Devastated', 'Frustrated', 'Envious', 'Thrilling Journey', 'Heartbreak', 'Betrayal', 'Suffering',
             'EmotionalStorm', 'Isolation', 'Disappointment', 'LostLove', 'Exhaustion', 'Sorrow', 'Darkness',
             'Desperation', 'Ruins', 'Desolation', 'Loss', 'Heartache', 'Solitude','Negative','Shame', 'Disappointed', 'Bitter', 'Fear', 'Anxiety', 'Intimidation', 'Helplessness', 'Regret', 'Despair', 'Grief', 'Loneliness',
             'Jealousy', 'Resentment', 'Frustration', 'Boredom', 'Dismissive', 'Bitterness', 'Yearning', 'Fearful', 'Apprehensive', 'Overwhelmed',
             'Jealous', 'Devastated', 'Frustrated', 'Envious', 'Thrilling Journey', 'Heartbreak', 'Betrayal', 'Suffering', 'EmotionalStorm', 'Isolation',
             'Disappointment', 'LostLove', 'Exhaustion', 'Sorrow', 'Darkness', 'Desperation', 'Ruins', 'Desolation', 'Loss', 'Heartache', 'Solitude']:
    return 'Negative'
  elif Sentiment in ['Neutral']:
        return 'Neutral'
  else:
        return 'Other'
df['sentiment_classment'] = df['Sentiment'].apply(Test_sentiment)

avg_likes_retweets = df.groupby('sentiment_classment')[['Likes', 'Retweets']].mean()
print("\nAverage Likes and Retweets per Sentiment Category:")
print(avg_likes_retweets)

# Visualization
avg_likes_retweets.plot(kind='bar', figsize=(10, 6))
plt.title('Average Likes and Retweets per Sentiment Category', fontsize = 14, fontweight = 'bold', color = 'darkgreen')
plt.ylabel('Count', fontsize = 12, fontweight = 'bold', color = 'darkblue')
plt.savefig('Average Likes and Retweets per Sentiment Category.png')
plt.show()

sns.barplot(x=df['sentiment_classment'].unique(), y=df['sentiment_classment'].value_counts(), data=df)
plt.xticks(rotation=90)

# Conversion des colonnes Year, Month, Day, Hour en un objet datetime
#df['Timestamp'] = pd.to_datetime(df[['Year', 'Month', 'Day', 'Hour']])

# Groupement par heure
hourly_sentiment = df.groupby(df['Hour'])['Sentiment'].value_counts().unstack().fillna(0)

# Groupement par jour
#daily_sentiment = df.groupby(df['Timestamp'].dt.date)['Sentiment'].value_counts().unstack().fillna(0)

# Groupement par mois
#monthly_sentiment = df.groupby([df['Timestamp'].dt.year, df['Timestamp'].dt.month])['Sentiment'].value_counts().unstack().fillna(0)

# Groupement par année
#yearly_sentiment = df.groupby(df['Timestamp'].dt.year)['Sentiment'].value_counts().unstack().fillna(0)

# Visualisation des changements de sentiment au fil du temps
# Exemple avec les changements de sentiment par jour
plt.figure(figsize=(12, 6))
sns.heatmap(hourly_sentiment.T, cmap='coolwarm', annot=True, fmt='g')
plt.title('Changements de sentiment au fil des heures')
plt.xlabel('Hour')
plt.ylabel('Sentiment')
plt.show()

most_liked_tweet = df[df['Likes'] == df['Likes'].max()]
most_retweeted_tweet = df[df['Retweets'] == df['Retweets'].max()]

print("\nMost Liked Tweet:")
print(most_liked_tweet)

print("\nMost Retweeted Tweet:")
print(most_retweeted_tweet)

df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Filter data for dates between 2022 and 2024
filtered_df = df[(df['Timestamp'].dt.year >= 2022) & (df['Timestamp'].dt.year <= 2024)]

# Extract date and count tweets per day
tweets_per_day = filtered_df.groupby(filtered_df['Timestamp'].dt.date)['Unnamed: 0'].count()

# Visualization
plt.figure(figsize=(10, 6))
plt.plot(tweets_per_day.index, tweets_per_day.values, marker='o')
plt.title('Time Trend of Tweets (2022-2024)', fontsize=14, fontweight='bold', color='darkgreen')
plt.xlabel('Date', fontsize=12, fontweight='bold', color='darkblue')
plt.ylabel('Number of Tweets', fontsize=12, fontweight='bold', color='darkblue')
plt.xticks(rotation=45)
plt.savefig('Time Trend of Tweets.png')
plt.show()

from wordcloud import WordCloud

# Combine all tweets into a single string
all_tweets = ' '.join(df['Text'])

# Generate a word cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_tweets)

# Visualization
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Top Words in Tweets', fontsize = 14, fontweight = 'bold', color = 'darkgreen')
plt.savefig('Top Words in Tweets.png')
plt.show()

df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Create a 'Date' column from the 'Timestamp' column
df['Date'] = df['Timestamp'].dt.date

# Filter data for dates between 2022 and 2024
filtered_df = df[(df['Timestamp'].dt.year >= 2022) & (df['Timestamp'].dt.year <= 2024)]

# Pivot table for sentiment over time
sentiments_over_time = filtered_df.pivot_table(
    index='Date', columns='sentiment_classment', values='Unnamed: 0', aggfunc='count', fill_value=0
)

# Visualization
sentiments_over_time.plot.area(stacked=True, figsize=(10, 6))
plt.title('Sentiment Over Time (2022-2024)', fontsize=14, fontweight='bold', color='darkgreen')
plt.xlabel('Date', fontsize=12, fontweight='bold', color='darkblue')
plt.ylabel('Count', fontsize=12, fontweight='bold', color='darkblue')
plt.xticks(rotation=45)
plt.savefig('Sentiment Over Time.png')
plt.show()

!jupyter nbconvert --to html app.ipynb